name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  version-control-and-ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build:
    needs: version-control-and-ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Compile code
        run: |
          echo "Compilação não é necessária ou não configurada."

  tests:
    needs: version-control-and-ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          PASSWORD: ${{ secrets.PASSWORD }}
          NEW_PASSWORD: ${{ secrets.NEW_PASSWORD }}
        run: |
          python -m unittest discover -s test -p '*_test.py'

  bandit:
    needs: version-control-and-ci
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install bandit

      - name: Run Bandit
        run: |
          bandit -r . -o bandit-report.html || true

      - name: List files
        run: |
          ls -l

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.html

  dependency_check:
    needs: build
    runs-on: ubuntu-latest
    name: Dependency-Check
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        id: Dependency-Check
        with:
          project: "Task-Manager-using-Flask"
          path: "."
          format: "HTML"
          out: "reports"
          args: >
            --scan "**/*.py"
            --scan "requirements.txt"
            --failOnCVSS 7
            --enableRetired
      - name: Upload Dependency-Check results
        uses: actions/upload-artifact@v3
        with:
          name: Dependency-Check report
          path: ${{ github.workspace }}/reports

  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image for Review
        run: |
          docker build -t task-manager-app:review .

      - name: Deploy to Review Environment
        run: |
          docker run -d --name task-manager-review -p 5001:5000 task-manager-app:review

  security-testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Deploy to Staging
        run: |
          docker build -t task-manager-app .
          docker run -d --name task-manager-staging -p 5000:5000 task-manager-app

      - name: Run OWASP ZAP Security Scan
        run: |
          docker run -t --rm zaproxy/zap-stable zap.sh -quickurl http://localhost:5000 -quickout zap_report.html || true

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Docker Image
        run: |
          docker build -t task-manager-using-flask .

      - name: Deploy to Staging
        run: |
          docker run -d --name Task-Manager-using-Flask -p 5000:5000 Task-Manager-using-Flask || true

  post-deployment-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Sample Step
        run: echo "This is the post-deployment monitoring job."

  grafana:
    runs-on: ubuntu-latest
    needs: post-deployment-monitoring
    steps:
      - name: Install Grafana
        run: |
          echo "Instalando Grafana"
          wget https://dl.grafana.com/oss/release/grafana_9.5.0_amd64.deb
          sudo dpkg -i grafana_9.5.0_amd64.deb

      - name: Start Grafana
        run: |
          echo "Iniciando Grafana"
          sudo systemctl daemon-reload
          sudo systemctl enable grafana-server
          sudo systemctl start grafana-server

      - name: Configure Grafana
        run: |
          echo "Configurando Grafana"
          # Adicione comandos para configurar o Grafana, como adicionar datasources via API